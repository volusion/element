{"componentChunkName":"component---src-templates-docs-js","path":"/references/cart-events","result":{"data":{"site":{"siteMetadata":{"title":"Element Documentation | Volusion","docsLocation":"https://github.com/volusion/element"}},"mdx":{"fields":{"id":"6b146b8a-509f-5e67-ae36-908cbe75984a","title":"Cart Events","slug":"/references/cart-events"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Cart Events\",\n  \"metaTitle\": \"Cart Events\",\n  \"metaDescription\": \"This reference will teach you about cart events in Element.\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"The Element SDK provides topic names for standard cart events. Blocks can subscribe to these topics and publish to them using PubSubJS.\"), mdx(\"h2\", null, \"Table of Contents\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#eventdefinitions\"\n  }), \"Event Definitions\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#'addtocart'\"\n  }), \"addToCart\"), \": publish to add an item to the cart\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#'itemaddedtocart'\"\n  }), \"itemAddedToCart\"), \": subscribe to get info about an item added to the cart\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#'itemremovedfromcart'\"\n  }), \"itemRemovedFromCart\"), \": subscribe to get info about an item removed from the cart\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#'openaccountpanel'\"\n  }), \"openAccountPanel\"), \": publish to open the account panel\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#'opencart'\"\n  }), \"openCart\"), \": publish to open the cart panel\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#'updatecartcount'\"\n  }), \"updateCartCount\"), \": subscribe to get the updated cart quantity\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#additionalreading\"\n  }), \"Additional Reading\"))), mdx(\"h3\", null, \"Event Definitions\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"props.utils.events.cart\"), \", available within block component definitions, is defined as follows:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"{\\n    addToCart: \\\"cart.addToCart\\\",\\n    itemAddedToCart: \\\"cart.itemAddedToCart\\\",\\n    itemRemovedFromCart: \\\"cart.itemRemovedFromCart\\\",\\n    openAccountPanel: \\\"cart.openAccountPanel\\\",\\n    openCart: \\\"cart.openCart\\\",\\n    updateCartCount: \\\"cart.updateCartCount\\\",\\n}\\n\")), mdx(\"p\", null, \"Subscriptions using these topics should be referenced as properties of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"props.utils.events.cart\"), \", not as strings, because these topic names are provided by Element SDK and could change. By using the property values from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"props.utils.events.cart\"), \", you are guaranteed to have a valid topic name. Using the string is not as safe.\"), mdx(\"p\", null, \"For example, use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"props.utils.events.cart.addToCart\"), \", not \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\\"cart.addToCart\\\"\"), \".\"), mdx(\"h2\", null, \"Events\"), mdx(\"h3\", null, \"'addToCart'\"), mdx(\"p\", null, \"The cart subscribes this event, and you can publish it from your own blocks to add items to the cart.\"), mdx(\"h4\", null, \"'addToCart' Usage\"), mdx(\"p\", null, \"When publishing an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"addToCart\"), \" event, you must provide an object as the second argument of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"publish\"), \" function with the following properties:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"props.utils.pubSub.publish(props.utils.events.cart.addToCart, {\\n  productId, // type: string, from product data\\n  quantity, // type: int, whatever quantity you want to add to the cart, ex: 1\\n  variantId, // type: string, from product data\\n  itemPrice, // type: float, from product data, ex: 4.99\\n})\\n\")), mdx(\"h3\", null, \"'itemAddedToCart'\"), mdx(\"p\", null, \"The cart publishes this event after the shopper adds an item to the cart. Your blocks can subscribe to it to see information about the item that the shopper added.\"), mdx(\"h4\", null, \"'itemAddedToCart' Usage\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"// subscribe to the event\\nprops.utils.pubSub.subscribe(\\n  props.utils.events.cart.itemAddedToCart,\\n  this.handleItemAdded\\n)\\n\\n// define a handler function to receive the data\\nhandleItemAdded = (msg, data) => {\\n  // use msg and data here\\n}\\n\")), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"data\"), \" provided by \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"itemAddedToCart\"), \" has the following shape:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"{\\n  id, // string, the id of the product\\n    images, // array of objects, containing image data for the product\\n    name, // string, the product name\\n    price, // float, the product price, ex: 4.99\\n    quantity // int, the quantity of items added to the cart in the triggering action\\n}\\n\")), mdx(\"h3\", null, \"'itemRemovedFromCart'\"), mdx(\"p\", null, \"The cart publishes this event after the shopper removes an item from the cart. Your blocks can subscribe to it to see information about the item that the shopper removed.\"), mdx(\"h4\", null, \"'itemRemovedFromCart' Usage\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"// subscribe to the event\\nprops.utils.pubSub.subscribe(\\n  props.utils.events.cart.itemRemovedFromCart,\\n  this.handleItemRemoved\\n)\\n\\n// define a handler function to receive the data\\nhandleItemRemoved = (msg, data) => {\\n  // use msg and data here\\n}\\n\")), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"data\"), \" provided by \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"itemRemovedFromCart\"), \" has the following shape:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"{\\n  id, // string, the id of the product\\n    images, // array of objects, containing image data for the product\\n    name, // string, the product name\\n    price, // float, the product price, ex: 4.99\\n    quantity // int, the quantity of items removed from the cart in the triggering action\\n}\\n\")), mdx(\"h3\", null, \"'openAccountPanel'\"), mdx(\"p\", null, \"The cart block subscribes to this event, and your blocks can publish the event to open the account panel.\"), mdx(\"h4\", null, \"'openAccountPanel' Usage\"), mdx(\"p\", null, \"No data is necessary when publishing this event.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"props.utils.pubSub.publish(props.utils.events.cart.openAccountPanel)\\n\")), mdx(\"h3\", null, \"'openCart'\"), mdx(\"p\", null, \"The cart block subscribes to this event, and your blocks can publish the event to open the cart panel.\"), mdx(\"h4\", null, \"'openCart' Usage\"), mdx(\"p\", null, \"No data is necessary when publishing this event.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"props.utils.pubSub.publish(props.utils.events.cart.openCart)\\n\")), mdx(\"h3\", null, \"'updateCartCount'\"), mdx(\"p\", null, \"The cart publishes this event after the shopper updates the count of total items in the cart. Your blocks can subscribe to it to see the new quantity of items in the cart.\"), mdx(\"h4\", null, \"'updateCartCount' Usage\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"// subscribe to the event\\nprops.utils.pubSub.subscribe(\\n  props.utils.events.cart.updateCartCount,\\n  this.handleUpdatedCartCount\\n)\\n\\n// define a handler function to receive the data\\nhandleUpdatedCartCount = (msg, count) => {\\n  // use msg and count here, count is an int\\n}\\n\")), mdx(\"h3\", null, \"Additional Reading\"), mdx(\"p\", null, \"For more details on PubSubJS, see the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.npmjs.com/package/pubsub-js\"\n  }), \"PubSubJS npm reference\"), \".\"), mdx(\"p\", null, \"For more information about how to communicate between blocks using PubSubJS, see \\\"\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/element/how-to/communicate-between-blocks\"\n  }), \"Communicate Between Blocks\"), \".\\\"\"));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#table-of-contents","title":"Table of Contents","items":[{"url":"#event-definitions","title":"Event Definitions"}]},{"url":"#events","title":"Events","items":[{"url":"#addtocart","title":"'addToCart'","items":[{"url":"#addtocart-usage","title":"'addToCart' Usage"}]},{"url":"#itemaddedtocart","title":"'itemAddedToCart'","items":[{"url":"#itemaddedtocart-usage","title":"'itemAddedToCart' Usage"}]},{"url":"#itemremovedfromcart","title":"'itemRemovedFromCart'","items":[{"url":"#itemremovedfromcart-usage","title":"'itemRemovedFromCart' Usage"}]},{"url":"#openaccountpanel","title":"'openAccountPanel'","items":[{"url":"#openaccountpanel-usage","title":"'openAccountPanel' Usage"}]},{"url":"#opencart","title":"'openCart'","items":[{"url":"#opencart-usage","title":"'openCart' Usage"}]},{"url":"#updatecartcount","title":"'updateCartCount'","items":[{"url":"#updatecartcount-usage","title":"'updateCartCount' Usage"}]},{"url":"#additional-reading","title":"Additional Reading"}]}]},"parent":{"__typename":"File","relativePath":"references/cart-events.md"},"frontmatter":{"metaTitle":"Cart Events","metaDescription":"This reference will teach you about cart events in Element."}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/how-to","title":"How-to Guides"}}},{"node":{"fields":{"slug":"/explanations","title":"Explanations"}}},{"node":{"fields":{"slug":"/","title":"Element Platform Documentation"}}},{"node":{"fields":{"slug":"/references","title":"Reference"}}},{"node":{"fields":{"slug":"/introduction","title":"What Is Element?"}}},{"node":{"fields":{"slug":"/tutorials","title":"Tutorials"}}},{"node":{"fields":{"slug":"/tutorials/proptypes","title":"Working With Element Proptypes Tutorial"}}},{"node":{"fields":{"slug":"/tutorials/building-an-element-page","title":"Building An Element Page Tutorial"}}},{"node":{"fields":{"slug":"/tutorials/product-landing-page","title":"Implementing a New Product Landing Page Tutorial"}}},{"node":{"fields":{"slug":"/tutorials/site-designer","title":"Design A New Theme With Site Designer Tutorial"}}},{"node":{"fields":{"slug":"/references/block-utils","title":"Block Utils"}}},{"node":{"fields":{"slug":"/references/element-cli","title":"Element CLI"}}},{"node":{"fields":{"slug":"/references/sdk","title":"Element SDK Client"}}},{"node":{"fields":{"slug":"/references/cart-events","title":"Cart Events"}}},{"node":{"fields":{"slug":"/references/proptypes","title":"Proptypes"}}},{"node":{"fields":{"slug":"/references/styling-your-block-with-css","title":"Styling Your Block With CSS"}}},{"node":{"fields":{"slug":"/how-to/add-external-scripts-from-a-block","title":"Add External Scripts from a Block"}}},{"node":{"fields":{"slug":"/how-to/add-blocks-to-templates","title":"Add Blocks to Templates"}}},{"node":{"fields":{"slug":"/how-to/add-page-to-theme","title":"Add a Page to a Theme"}}},{"node":{"fields":{"slug":"/how-to/communicate-between-blocks","title":"Communicate Between Blocks"}}},{"node":{"fields":{"slug":"/how-to/add-page-with-uri-parameters","title":"Add a Page That Depends on URI Parameters"}}},{"node":{"fields":{"slug":"/how-to/data-third-party-services","title":"Fetch Data from Third-Party Services"}}},{"node":{"fields":{"slug":"/how-to/data-volusion-api","title":"Fetch Data from Volusion's API"}}},{"node":{"fields":{"slug":"/how-to/env-setup","title":"Set up Your Local Environment"}}},{"node":{"fields":{"slug":"/how-to/get-approved-to-develop-blocks","title":"Get Approved to Develop Blocks"}}},{"node":{"fields":{"slug":"/how-to/preview-block-changes","title":"Preview Block Changes"}}},{"node":{"fields":{"slug":"/how-to/interact-with-the-cart","title":"Interact with the Cart"}}},{"node":{"fields":{"slug":"/how-to/proptypes","title":"Add Element Proptypes"}}},{"node":{"fields":{"slug":"/how-to/reuse-a-block-across-pages","title":"Reuse A Block Across Pages"}}},{"node":{"fields":{"slug":"/how-to/release-a-minor-block-change","title":"Release A Minor Block Change"}}},{"node":{"fields":{"slug":"/how-to/read-page-uri-parameters-in-blocks","title":"Read Page URI Parameters In Blocks"}}},{"node":{"fields":{"slug":"/how-to/release-a-new-major-block-version","title":"Release A New Major Block Version"}}},{"node":{"fields":{"slug":"/how-to/rollback-a-block-change","title":"Rollback A Block Change"}}},{"node":{"fields":{"slug":"/how-to/set-seo-data-from-a-block","title":"Set SEO Data from a Block"}}},{"node":{"fields":{"slug":"/how-to/use-react-hooks-in-a-block","title":"Use React Hooks in an Element Block"}}},{"node":{"fields":{"slug":"/how-to/style-a-block-with-aphrodite","title":"Style A Block With Aphrodite"}}},{"node":{"fields":{"slug":"/how-to/track-block-versions","title":"Track Block Versions"}}},{"node":{"fields":{"slug":"/explanations/all-the-tech-you-need","title":"All The Tech You Need"}}},{"node":{"fields":{"slug":"/explanations/adding-a-blog","title":"Adding a Blog"}}},{"node":{"fields":{"slug":"/explanations/block-versions","title":"Block Versions"}}},{"node":{"fields":{"slug":"/explanations/element-concepts","title":"Element Concepts"}}},{"node":{"fields":{"slug":"/explanations/e-commerce-pages","title":"Ecommerce Theme Pages"}}},{"node":{"fields":{"slug":"/explanations/keeping-your-site-fast","title":"Keeping Your Site Fast"}}},{"node":{"fields":{"slug":"/explanations/what-is-element","title":"What Is Element?"}}},{"node":{"fields":{"slug":"/how-to/fetch-data-fast","title":"Fetch Block Data Fast"}}}]}},"pageContext":{"id":"6b146b8a-509f-5e67-ae36-908cbe75984a"}}}