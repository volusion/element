{"componentChunkName":"component---src-templates-docs-js","path":"/how-to/style-a-block-with-aphrodite","result":{"data":{"site":{"siteMetadata":{"title":"Element Documentation | Volusion","docsLocation":"https://github.com/volusion/element"}},"mdx":{"fields":{"id":"87d2dab1-966e-53e4-9add-25b0939bfe2c","title":"Style A Block With Aphrodite","slug":"/how-to/style-a-block-with-aphrodite"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Style A Block With Aphrodite\",\n  \"metaTitle\": \"Style A Block With Aphrodite\",\n  \"metaDescription\": \"This how-to guide covers styling a block with Aphrodite, a framework for writing JavaScript-based CSS and creating dynamic classes for use in React.\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Aphrodite is a framework for writing JavaScript-based CSS and creating dynamic classes for use in React. You can read more about it in the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/Khan/aphrodite\"\n  }), \"official documentation\"), \".\"), mdx(\"h2\", null, \"Writing Your Styles\"), mdx(\"h3\", null, \"1. Creating User-Editable Props\"), mdx(\"p\", null, \"Sometimes you will want your user to be able to alter the style of their block. Most commonly this comes in the form of changing colors. For a detailed explanation on writing props, see \\\"\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/element/how-to/proptypes\"\n  }), \"Add element Proptypes\"), \".\\\"\"), mdx(\"h3\", null, \"2. Writing Your Styles File\"), mdx(\"p\", null, \"You will write your CSS in a file called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"getStyles.js\"), \". The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"getStyles\"), \" function argument is your block's props (defined in step 1). By default, the function will look something like this:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"export const getStyles(blockProps) => ({})\\n\")), mdx(\"p\", null, \"You will want to write your CSS in this format:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"yourClassName: {\\n  cssRule: ruleProperty\\n}\\n\")), mdx(\"p\", null, \"Example:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"export const getStyles(blockProps) => ({\\n    header: {\\n        backgroundColor: '#fff',\\n        color: '#000'\\n    }\\n})\\n\")), mdx(\"p\", null, \"Remember, you're writing Javascript-based CSS, so be sure to use the correct CSS rule names (i.e. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"backgroundColor\"), \" instead of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"background-color\"), \"). \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.w3schools.com/jsref/dom_obj_style.asp\"\n  }), \"View a list of available style rules here.\")), mdx(\"p\", null, \"If you have defined user-editable props, you can reference them like this:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"export const getStyles({ headerBackgroundColor, headerTextColor }) => ({\\n    header: {\\n        backgroundColor: headerBackgroundColor,\\n        color: headerTextColor\\n    }\\n})\\n\")), mdx(\"h3\", null, \"3. Creating Your Classes\"), mdx(\"p\", null, \"When you need to reference your custom styles, you will need to import your \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"getStyles\"), \" function from your styles file as well as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"css\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"StyleSheet\"), \" from Aphrodite. Afterwards, follow the example below to create your classes object. Once your classes object exists, you can create your dynamic classNames using the following format: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"css(classes.YOUR_CLASS_NAME)\"), \".\"), mdx(\"p\", null, \"Example:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascriptx\"\n  }), \"import React from 'react';\\nimport { css, StyleSheet } from 'aphrodite';\\nimport { getSyles } from './getStyles';\\n\\nconst Block = props => {\\n    const classes = StyleSheet.create(getStyles(props));\\n    return (\\n        <header className={css(classes.header)}>\\n            // ...\\n        <header>\\n    );\\n};\\nBlock.defaultProps = defaultConfig;\\nexport { Block }\\n\")), mdx(\"h3\", null, \"4. Referencing Your Classes from within Your Components\"), mdx(\"p\", null, \"Simply pass the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"classes\"), \" props down to your component, import \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"css\"), \" in your component file (just like you did for your Block file), and follow the same process for constructing your class.\"), mdx(\"p\", null, \"Example block code:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascriptx\"\n  }), \"import React from 'react';\\nimport { css, StyleSheet } from 'aphrodite';\\nimport { getSyles } from './getStyles';\\nimport { Logo } from './components/Logo';\\n\\nconst Block = props => {\\n    const classes = StyleSheet.create(getStyles(props));\\n    return (\\n        <header className={css(classes.header)}>\\n            <Logo classes={classes} />\\n        <header>\\n    );\\n};\\nBlock.defaultProps = defaultConfig;\\nexport { Block }\\n\")), mdx(\"p\", null, \"Example component:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascriptx\"\n  }), \"import React from 'react';\\nimport { css, StyleSheet } from 'aphrodite';\\n\\nexport const Logo = ({ classes }) => (\\n    <div className={css(classes.logo)}>\\n        // ...\\n    <div>\\n);\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#writing-your-styles","title":"Writing Your Styles","items":[{"url":"#1-creating-user-editable-props","title":"1. Creating User-Editable Props"},{"url":"#2-writing-your-styles-file","title":"2. Writing Your Styles File"},{"url":"#3-creating-your-classes","title":"3. Creating Your Classes"},{"url":"#4-referencing-your-classes-from-within-your-components","title":"4. Referencing Your Classes from within Your Components"}]}]},"parent":{"__typename":"File","relativePath":"how-to/style-a-block-with-aphrodite.md"},"frontmatter":{"metaTitle":"Style A Block With Aphrodite","metaDescription":"This how-to guide covers styling a block with Aphrodite, a framework for writing JavaScript-based CSS and creating dynamic classes for use in React."}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/how-to","title":"How-to Guides"}}},{"node":{"fields":{"slug":"/explanations","title":"Explanations"}}},{"node":{"fields":{"slug":"/","title":"Element Platform Documentation"}}},{"node":{"fields":{"slug":"/introduction","title":"What Is Element?"}}},{"node":{"fields":{"slug":"/references","title":"Reference"}}},{"node":{"fields":{"slug":"/tutorials","title":"Tutorials"}}},{"node":{"fields":{"slug":"/tutorials/building-an-element-page","title":"Building An Element Page Tutorial"}}},{"node":{"fields":{"slug":"/tutorials/product-landing-page","title":"Implementing a New Product Landing Page Tutorial"}}},{"node":{"fields":{"slug":"/tutorials/proptypes","title":"Working With Element Proptypes Tutorial"}}},{"node":{"fields":{"slug":"/tutorials/site-designer","title":"Design A New Theme With Site Designer Tutorial"}}},{"node":{"fields":{"slug":"/references/cart-events","title":"Cart Events"}}},{"node":{"fields":{"slug":"/references/block-utils","title":"Block Utils"}}},{"node":{"fields":{"slug":"/references/element-cli","title":"Element CLI"}}},{"node":{"fields":{"slug":"/references/proptypes","title":"Proptypes"}}},{"node":{"fields":{"slug":"/references/sdk","title":"Element SDK Client"}}},{"node":{"fields":{"slug":"/references/styling-your-block-with-css","title":"Styling Your Block With CSS"}}},{"node":{"fields":{"slug":"/how-to/add-blocks-to-templates","title":"Add Blocks to Templates"}}},{"node":{"fields":{"slug":"/how-to/add-external-scripts-from-a-block","title":"Add External Scripts from a Block"}}},{"node":{"fields":{"slug":"/how-to/add-page-to-theme","title":"Add a Page to a Theme"}}},{"node":{"fields":{"slug":"/how-to/add-page-with-uri-parameters","title":"Add a Page That Depends on URI Parameters"}}},{"node":{"fields":{"slug":"/how-to/communicate-between-blocks","title":"Communicate Between Blocks"}}},{"node":{"fields":{"slug":"/how-to/data-third-party-services","title":"Fetch Data from Third-Party Services"}}},{"node":{"fields":{"slug":"/how-to/data-volusion-api","title":"Fetch Data from Volusion's API"}}},{"node":{"fields":{"slug":"/how-to/env-setup","title":"Set up Your Local Environment"}}},{"node":{"fields":{"slug":"/how-to/fetch-data-fast","title":"Fetch Block Data Fast"}}},{"node":{"fields":{"slug":"/how-to/interact-with-the-cart","title":"Interact with the Cart"}}},{"node":{"fields":{"slug":"/how-to/preview-block-changes","title":"Preview Block Changes"}}},{"node":{"fields":{"slug":"/how-to/get-approved-to-develop-blocks","title":"Get Approved to Develop Blocks"}}},{"node":{"fields":{"slug":"/how-to/proptypes","title":"Add Element Proptypes"}}},{"node":{"fields":{"slug":"/how-to/read-page-uri-parameters-in-blocks","title":"Read Page URI Parameters In Blocks"}}},{"node":{"fields":{"slug":"/how-to/release-a-minor-block-change","title":"Release A Minor Block Change"}}},{"node":{"fields":{"slug":"/how-to/release-a-new-major-block-version","title":"Release A New Major Block Version"}}},{"node":{"fields":{"slug":"/how-to/reuse-a-block-across-pages","title":"Reuse A Block Across Pages"}}},{"node":{"fields":{"slug":"/how-to/rollback-a-block-change","title":"Rollback A Block Change"}}},{"node":{"fields":{"slug":"/how-to/set-seo-data-from-a-block","title":"Set SEO Data from a Block"}}},{"node":{"fields":{"slug":"/how-to/style-a-block-with-aphrodite","title":"Style A Block With Aphrodite"}}},{"node":{"fields":{"slug":"/how-to/track-block-versions","title":"Track Block Versions"}}},{"node":{"fields":{"slug":"/how-to/use-react-hooks-in-a-block","title":"Use React Hooks in an Element Block"}}},{"node":{"fields":{"slug":"/explanations/adding-a-blog","title":"Adding a Blog"}}},{"node":{"fields":{"slug":"/explanations/all-the-tech-you-need","title":"All The Tech You Need"}}},{"node":{"fields":{"slug":"/explanations/block-versions","title":"Block Versions"}}},{"node":{"fields":{"slug":"/explanations/e-commerce-pages","title":"Ecommerce Theme Pages"}}},{"node":{"fields":{"slug":"/explanations/element-concepts","title":"Element Concepts"}}},{"node":{"fields":{"slug":"/explanations/keeping-your-site-fast","title":"Keeping Your Site Fast"}}},{"node":{"fields":{"slug":"/explanations/what-is-element","title":"What Is Element?"}}}]}},"pageContext":{"id":"87d2dab1-966e-53e4-9add-25b0939bfe2c"}}}